//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace STDDatos
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Solicitante))]
    [KnownType(typeof(Tramite))]
    [KnownType(typeof(Cargo))]
    public partial class Expediente
    {
        #region Primitive Properties
        [DataMember]
        public virtual int codigo
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<int> codigoSolicitante
        {
            get { return _codigoSolicitante; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_codigoSolicitante != value)
                    {
                        if (Solicitante != null && Solicitante.codigo != value)
                        {
                            Solicitante = null;
                        }
                        _codigoSolicitante = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _codigoSolicitante;
        [DataMember]
        public virtual Nullable<int> codigoTramite
        {
            get { return _codigoTramite; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_codigoTramite != value)
                    {
                        if (Tramite != null && Tramite.codigo != value)
                        {
                            Tramite = null;
                        }
                        _codigoTramite = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _codigoTramite;
        [DataMember]
        public virtual Nullable<int> Estado
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
        
    
        [DataMember]
        public virtual Solicitante Solicitante
        {
            get { return _solicitante; }
            set
            {
                if (!ReferenceEquals(_solicitante, value))
                {
                    var previousValue = _solicitante;
                    _solicitante = value;
                    FixupSolicitante(previousValue);
                }
            }
        }
        private Solicitante _solicitante;
        
    
        [DataMember]
        public virtual Tramite Tramite
        {
            get { return _tramite; }
            set
            {
                if (!ReferenceEquals(_tramite, value))
                {
                    var previousValue = _tramite;
                    _tramite = value;
                    FixupTramite(previousValue);
                }
            }
        }
        private Tramite _tramite;
        
    
        [DataMember]
        public virtual ICollection<Cargo> Cargo_1
        {
            get
            {
                if (_cargo_1 == null)
                {
                    var newCollection = new FixupCollection<Cargo>();
                    newCollection.CollectionChanged += FixupCargo_1;
                    _cargo_1 = newCollection;
                }
                return _cargo_1;
            }
            set
            {
                if (!ReferenceEquals(_cargo_1, value))
                {
                    var previousValue = _cargo_1 as FixupCollection<Cargo>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCargo_1;
                    }
                    _cargo_1 = value;
                    var newValue = value as FixupCollection<Cargo>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCargo_1;
                    }
                }
            }
        }
        private ICollection<Cargo> _cargo_1;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupSolicitante(Solicitante previousValue)
        {
            if (previousValue != null && previousValue.Expediente.Contains(this))
            {
                previousValue.Expediente.Remove(this);
            }
    
            if (Solicitante != null)
            {
                if (!Solicitante.Expediente.Contains(this))
                {
                    Solicitante.Expediente.Add(this);
                }
                if (codigoSolicitante != Solicitante.codigo)
                {
                    codigoSolicitante = Solicitante.codigo;
                }
            }
            else if (!_settingFK)
            {
                codigoSolicitante = null;
            }
        }
    
        private void FixupTramite(Tramite previousValue)
        {
            if (previousValue != null && previousValue.Expediente.Contains(this))
            {
                previousValue.Expediente.Remove(this);
            }
    
            if (Tramite != null)
            {
                if (!Tramite.Expediente.Contains(this))
                {
                    Tramite.Expediente.Add(this);
                }
                if (codigoTramite != Tramite.codigo)
                {
                    codigoTramite = Tramite.codigo;
                }
            }
            else if (!_settingFK)
            {
                codigoTramite = null;
            }
        }
    
        private void FixupCargo_1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Cargo item in e.NewItems)
                {
                    item.Expediente_1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Cargo item in e.OldItems)
                {
                    if (ReferenceEquals(item.Expediente_1, this))
                    {
                        item.Expediente_1 = null;
                    }
                }
            }
        }

        #endregion
    }
}
